let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <S-F9> :call C_Arguments()
imap <buffer> <silent> <C-F9> :call C_Run()
imap <buffer> <silent> <F9> :call C_Link():redraw:call C_HlMessage()
imap <buffer> <silent> <M-F9> :call C_Compile():redraw:call C_HlMessage()
map <buffer> <silent> \h :call C_HelpCsupport()
map <buffer> <silent> \ro :call C_Toggle_Gvim_Xterm()
map <buffer> <silent> \rx :call C_XtermSize()
map <buffer> <silent> \rs :call C_Settings()
vmap <buffer> <silent> \rh :call C_Hardcopy("v")
nmap <buffer> <silent> \rh :call C_Hardcopy("n")
omap <buffer> <silent> \rh :call C_Hardcopy("n")
vmap <buffer> <silent> \rd :call C_Indent("v"):redraw:call C_HlMessage()
nmap <buffer> <silent> \rd :call C_Indent("a"):redraw:call C_HlMessage()
omap <buffer> <silent> \rd :call C_Indent("a"):redraw:call C_HlMessage()
map <buffer> <silent> \ri :call C_SplintArguments()
map <buffer> <silent> \rp :call C_SplintCheck():redraw:call C_HlMessage()
map <buffer> <silent> \rg :call C_MakeArguments()
map <buffer> <silent> \rm :call C_Make()
map <buffer> <silent> \ra :call C_Arguments()
map <buffer> <silent> \rr :call C_Run()
map <buffer> <silent> \rl :call C_Link():redraw:call C_HlMessage()
map <buffer> <silent> \rc :call C_Compile():redraw:call C_HlMessage()
vmap <buffer> <silent> \+. :call C_CodeCatch("v","...")
nmap <buffer> <silent> \+. :call C_CodeCatch("a","...")
omap <buffer> <silent> \+. :call C_CodeCatch("a","...")
vmap <buffer> <silent> \+h :call C_CodeCatch("v"," const &ExceptObj ")f(fci
nmap <buffer> <silent> \+h :call C_CodeCatch("a"," const &ExceptObj ")f(fci
omap <buffer> <silent> \+h :call C_CodeCatch("a"," const &ExceptObj ")f(fci
vmap <buffer> <silent> \+y :call C_CodeTryCatch("v")f(fci
nmap <buffer> <silent> \+y :call C_CodeTryCatch("a")o
omap <buffer> <silent> \+y :call C_CodeTryCatch("a")o
map <buffer> <silent> \+f :call C_CodeTemplateFunct()
map <buffer> <silent> \+w :call C_CommentTemplates("CppTemplateClassUsingNew")
map <buffer> <silent> \+t :call C_CommentTemplates("CppTemplateClass")
map <buffer> <silent> \+o :call C_CommentTemplates("CppErrorClass")
map <buffer> <silent> \+n :call C_CommentTemplates("CppClassUsingNew")
map <buffer> <silent> \+l :call C_CommentTemplates("CppClass")
map <buffer> <silent> \+d :call C_CodeMethod()
map <buffer> <silent> \ns :call C_ProtoShow()
map <buffer> <silent> \nc :call C_ProtoClear()
map <buffer> <silent> \ni :call C_ProtoInsert()
vmap <buffer> <silent> \np :call C_ProtoPick("v")
nmap <buffer> <silent> \np :call C_ProtoPick("n")
omap <buffer> <silent> \np :call C_ProtoPick("n")
map <buffer> <silent> \ne :call C_CodeSnippet("e")
vmap <buffer> <silent> \nw :call C_CodeSnippet("wv")
nmap <buffer> <silent> \nw :call C_CodeSnippet("w")
omap <buffer> <silent> \nw :call C_CodeSnippet("w")
map <buffer> <silent> \nr :call C_CodeSnippet("r")
map <buffer> <silent> \io :call C_CodeFopen("output")jf"a
map <buffer> <silent> \ii :call C_CodeFopen("input")jf"a
vnoremap <buffer> <silent> \ir sassert();F(p
nnoremap <buffer> <silent> \ir oassert();<Left><Left>
onoremap <buffer> <silent> \ir oassert();<Left><Left>
vnoremap <buffer> <silent> \iz ssizeof()P
nnoremap <buffer> <silent> \iz isizeof()<Left>
onoremap <buffer> <silent> \iz isizeof()<Left>
map <buffer> <silent> \ia :call C_CodeMalloc("m")i
map <buffer> <silent> \il :call C_CodeMalloc("c")i
noremap <buffer> <silent> \ic oscanf("", & );F"i
noremap <buffer> <silent> \ip oprintf("\n");2F"a
map <buffer> <silent> \iu :call C_EST("union")o
map <buffer> <silent> \is :call C_EST("struct")o
map <buffer> <silent> \ie :call C_EST("enum")o
vmap <buffer> <silent> \in :call C_CodeFor("down", "v")
vmap <buffer> <silent> \i0 :call C_CodeFor("up"  , "v")
nmap <buffer> <silent> \in :call C_CodeFor("down", "a")a
omap <buffer> <silent> \in :call C_CodeFor("down", "a")a
nmap <buffer> <silent> \i0 :call C_CodeFor("up"  , "a")a
omap <buffer> <silent> \i0 :call C_CodeFor("up"  , "a")a
vmap <buffer> <silent> \im :call C_CodeMain("v")
nmap <buffer> <silent> \im :call C_CodeMain("a")3jA
omap <buffer> <silent> \im :call C_CodeMain("a")3jA
vmap <buffer> <silent> \it :call C_CodeFunction("sv")w
nmap <buffer> <silent> \it :call C_CodeFunction("sa")w
omap <buffer> <silent> \it :call C_CodeFunction("sa")w
vmap <buffer> <silent> \if :call C_CodeFunction("v")
nmap <buffer> <silent> \if :call C_CodeFunction("a")
omap <buffer> <silent> \if :call C_CodeFunction("a")
map <buffer> <silent> \pr :call C_PPIf0Remove()
vmap <buffer> <silent> \p0 :call C_PPIf0("v")
vmap <buffer> <silent> \pe :call C_PPIfDef (         "v" )
vmap <buffer> <silent> \pn :call C_PPIfElse("ifndef","v+")
vmap <buffer> <silent> \pf :call C_PPIfElse("ifdef" ,"v+")
vmap <buffer> <silent> \pi :call C_PPIfElse("if"    ,"v+")
nmap <buffer> <silent> \p0 :call C_PPIf0("a")2ji
omap <buffer> <silent> \p0 :call C_PPIf0("a")2ji
nmap <buffer> <silent> \pe :call C_PPIfDef (         "a" )2ji
omap <buffer> <silent> \pe :call C_PPIfDef (         "a" )2ji
nmap <buffer> <silent> \pn :call C_PPIfElse("ifndef","a+")
omap <buffer> <silent> \pn :call C_PPIfElse("ifndef","a+")
nmap <buffer> <silent> \pf :call C_PPIfElse("ifdef" ,"a+")
omap <buffer> <silent> \pf :call C_PPIfElse("ifdef" ,"a+")
nmap <buffer> <silent> \pi :call C_PPIfElse("if"    ,"a+")
omap <buffer> <silent> \pi :call C_PPIfElse("if"    ,"a+")
map <buffer> <silent> \pu :call C_PPUndef()f	a
map <buffer> <silent> \pd :call C_PPDefine()f	a
noremap <buffer> <silent> \p" o#include	""<Left>
noremap <buffer> <silent> \p< o#include	<><Left>
vmap <buffer> <silent> \s{ :call C_Block("v")
nmap <buffer> <silent> \s{ :call C_Block("a")o
omap <buffer> <silent> \s{ :call C_Block("a")o
vmap <buffer> <silent> \sc :call C_CodeCaseVisual()
nmap <buffer> <silent> \sc ocase 0:	break;2kf0s
omap <buffer> <silent> \sc ocase 0:	break;2kf0s
vmap <buffer> <silent> \ss :call C_CodeSwitchVisual()f(la
nmap <buffer> <silent> \ss :call C_CodeSwitch()f(la
omap <buffer> <silent> \ss :call C_CodeSwitch()f(la
vmap <buffer> <silent> \sh :call C_StatBlock("v","while (  )")f(la
nmap <buffer> <silent> \sh :call C_StatBlock("a","while (  )")f(la
omap <buffer> <silent> \sh :call C_StatBlock("a","while (  )")f(la
vmap <buffer> <silent> \sw :call C_Stat("v","while (  )")f(la
nmap <buffer> <silent> \sw :call C_Stat("a","while (  )")f(la
omap <buffer> <silent> \sw :call C_Stat("a","while (  )")f(la
vmap <buffer> <silent> \sl :call C_IfBlockElse("v")f(la
nmap <buffer> <silent> \sl :call C_IfBlockElse("a")f(la
omap <buffer> <silent> \sl :call C_IfBlockElse("a")f(la
vmap <buffer> <silent> \sf :call C_StatBlock("v","if (  )")f(la
nmap <buffer> <silent> \sf :call C_StatBlock("a","if (  )")f(la
omap <buffer> <silent> \sf :call C_StatBlock("a","if (  )")f(la
vmap <buffer> <silent> \se :call C_IfElse("v")f(la
nmap <buffer> <silent> \se :call C_IfElse("a")f(la
omap <buffer> <silent> \se :call C_IfElse("a")f(la
vmap <buffer> <silent> \si :call C_Stat("v","if (  )")f(la
nmap <buffer> <silent> \si :call C_Stat("a","if (  )")f(la
omap <buffer> <silent> \si :call C_Stat("a","if (  )")f(la
vmap <buffer> <silent> \sr :call C_StatBlock("v","for ( ; ; )")f;i
nmap <buffer> <silent> \sr :call C_StatBlock("a","for ( ; ; )")f;i
omap <buffer> <silent> \sr :call C_StatBlock("a","for ( ; ; )")f;i
vmap <buffer> <silent> \so :call C_Stat("v","for ( ; ; )")f;i
nmap <buffer> <silent> \so :call C_Stat("a","for ( ; ; )")f;i
omap <buffer> <silent> \so :call C_Stat("a","for ( ; ; )")f;i
vmap <buffer> <silent> \sd :call C_DoWhile("v")f(la
nmap <buffer> <silent> \sd :call C_DoWhile("a")f(la
omap <buffer> <silent> \sd :call C_DoWhile("a")f(la
map <buffer> <silent> \cy :call C_Toggle_C_Cpp()
map <buffer> <silent> \ct a=strftime("%x %X %Z")
map <buffer> <silent> \cd a=strftime("%x")
map <buffer> <silent> \ca :call C_CommentTemplates("class")
map <buffer> <silent> \cm :call C_CommentTemplates("method")
map <buffer> <silent> \cu :call C_CommentTemplates("function")
map <buffer> <silent> \cf :call C_CommentTemplates("frame")
vmap <buffer> <silent> \co :call C_CommentCode("v"):nohlsearch
nmap <buffer> <silent> \co :call C_CommentCode("a"):nohlsearch
omap <buffer> <silent> \co :call C_CommentCode("a"):nohlsearch
vmap <buffer> <silent> \c\ :call C_CodeComment("v","no"):nohlsearchj
nmap <buffer> <silent> \c\ :call C_CodeComment("a","no"):nohlsearchj
omap <buffer> <silent> \c\ :call C_CodeComment("a","no"):nohlsearchj
vmap <buffer> <silent> \c* :call C_CodeComment("v","yes"):nohlsearchj
nmap <buffer> <silent> \c* :call C_CodeComment("a","yes"):nohlsearchj
omap <buffer> <silent> \c* :call C_CodeComment("a","yes"):nohlsearchj
vmap <buffer> <silent> \ci :call C_CodeComment("v","yes"):nohlsearch
nmap <buffer> <silent> \ci o/*/kA 
omap <buffer> <silent> \ci o/*/kA 
map <buffer> <silent> \cs :call C_GetLineEndCommCol()
vmap <buffer> <silent> \cn :call C_MultiLineEndComments("// ")A
nmap <buffer> <silent> \cn :call C_LineEndComment("// ")A
omap <buffer> <silent> \cn :call C_LineEndComment("// ")A
vmap <buffer> <silent> \cl :call C_MultiLineEndComments()a
nmap <buffer> <silent> \cl :call C_LineEndComment()a
omap <buffer> <silent> \cl :call C_LineEndComment()a
vmap <buffer> <silent> \cj :call C_AdjustLineEndComm("v")
nmap <buffer> <silent> \cj :call C_AdjustLineEndComm("a")
omap <buffer> <silent> \cj :call C_AdjustLineEndComm("a")
map <buffer> <silent> <S-F9> :call C_Arguments()
map <buffer> <silent> <C-F9> :call C_Run()
map <buffer> <silent> <F9> :call C_Link():redraw:call C_HlMessage()
map <buffer> <silent> <M-F9> :call C_Compile():redraw:call C_HlMessage()
inoremap <buffer> <silent> \iz sizeof()<Left>
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i,k
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=/usr/share/dict/words,~/.vim/c-support/wordlists/c-c++-keywords.list,~/.vim/c-support/wordlists/k+r.list,~/.vim/c-support/wordlists/stl_index.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'c'
setlocal filetype=c
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=999
setlocal foldmarker={{{,}}}
setlocal foldmethod=syntax
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'c'
setlocal syntax=c
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
let s:l = 40 - ((39 * winheight(0) + 30) / 60)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
40
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
